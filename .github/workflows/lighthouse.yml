# https://github.com/marketplace/actions/lighthouse-ci-action
name: Lighthouse Audit

on:
  push:
    branches: [main]
  schedule:
    # Monday day 6:00 am GMT+8
    - cron: '0 22 * * 0'

jobs:
  wait-for-deployment:
    uses: dazedbear/dazedbear.github.io/.github/workflows/vercel-deployment.yml@main
    secrets:
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

  lighthouse-production:
    needs: wait-for-deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Audit URLs using Lighthouse
        id: lighthouseci
        uses: treosh/lighthouse-ci-action@v8
        with:
          urls: |
            https://www.dazedbear.pro/
            https://www.dazedbear.pro/music
            https://www.dazedbear.pro/music-notebook
            https://www.dazedbear.pro/coding
            https://www.dazedbear.pro/article
          uploadArtifacts: false
          temporaryPublicStorage: false
      - name: Upload Lighthouse Report JSON files to Gist
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GIST_TOKEN }}
          script: |
            const fs = require('fs')
            const path = require('path')

            const reportFileExtension = '.report.json'
            const reportBaseUrl = 'https://googlechrome.github.io/lighthouse/viewer?gist='

            const reportDir = '${{ steps.lighthouseci.outputs.resultsPath }}'
            const reportPaths = (fs.readdirSync(reportDir) || []).filter(filename => filename.includes(reportFileExtension))
            const createGistPromises = reportPaths.map(filename => {
              const filePath = path.join(reportDir, filename)
              const content = fs.readFileSync(filePath, 'utf-8')
              const files = {
                [filename]: { 
                  content
                }
              }
              return github.gists.create({ files })
                .then(newGist => {
                  core.info(`${reportBaseUrl}${newGist.data.id}`);
                })
            })
            core.startGroup('Deploy to Gist')
            core.info('Lighthouse Reports:')
            await Promise.all(createGistPromises)
            core.endGroup()
